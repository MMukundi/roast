%once
%<math>

0 QCapacity def
1 QItemSize def
2 QData def
3 QFront def
4 QBack def
5 QSize def
6 NumberQueueProperties def

{ # itemSize capacity
	2 copy * # itemSize capacity totalSize
	8 * buffer # itemSize capacity Array[totalSize]
	NumberQueueProperties 8* buffer # itemSize capacity Array[totalSize] queue
	4 -2 roll # Array[totalSize] queue itemSize capacity 
	2 index QCapacity set # Array[totalSize] queue itemSize 
	1 index QItemSize set # Array[totalSize] queue 
	swap 1 index QData set # queue
	0 1 index QFront set # queue
	0 1 index QBack set # queue
	0 1 index QSize set # queue
} createQueue def

{ # queue
	QSize get
} queueSize def

{ # queue
	dup QCapacity get swap QSize get =
} queueIsFull def

{ # queue
	QSize get 0 =
} queueIsEmpty def


{ # queue index
	swap # index queue
	0 index QData get # index queue dataPtr
	1 index QFront get # index queue dataPtr frontIndex
	4 -1 roll + #  queue dataPtr (frontIndex+index)
	2 index QCapacity get #  queue dataPtr (frontIndex+index) capacity
	positiveMod call # queue dataPtr ((frontIndex+index)%capacity)
	2 index QItemSize get # queue dataPtr ((frontIndex+index)%capacity) itemSize
	* getPtr # queue dataPtr+((frontIndex+index)%capacity)*itemSize
	swap pop
} queueIndexPointer def

{ # queue index
	queueIndexPointer call read
} queueIndex def

{ # queue
	0 queueIndex call
} queueFront def

{ # queue
	dup QSize get 1 - queueIndex call
} queueBack def


{ # queue
	0 queueIndexPointer call
} queueFrontPointer def

{ # queue
	dup QSize get 1 - queueIndexPointer call
} queueBackPointer def


{ # queue
	# Check capacity
	dup queueIsFull call !
	{ pop }
	{
		dup QSize get 1 + 1 index QSize set
		0 index QBack get # queue back
		1 index QItemSize get  # queue back itemSize
		swap 1 index # queue itemSize back itemSize
		* # queue itemSize backIndex
		2 index QData get # queue itemSize backIndex dataPtr
		swap getPtr # queue itemSize itemPtr
		3 -1 roll 

		# Update queue 
		0 index QBack get 1 +
		1 index QCapacity get %
		swap QBack set

		swap
		enqueueLoop call
	} ifelse
} enqueue def
{ # queue value
	swap
	# Check capacity
	dup queueIsFull call !
	{ pop }
	{
		dup QSize get 1 + 1 index QSize set
		0 index QBack get # queue back
		1 index QItemSize get  # queue back itemSize
		swap 1 index # queue itemSize back itemSize
		* # queue itemSize backIndex
		2 index QData get # queue itemSize backIndex dataPtr
		swap getPtr # queue itemSize itemPtr
		3 -1 roll # value itemSize itemPtr queue

		# Update queue 
		0 index QBack get 1 +
		1 index QCapacity get %
		swap QBack set

		swap enqueueLoop call
	} ifelse
} enqueueSingle def
{ # value dataPointer itemsLeft
	3 2 roll # dataPointer itemsLeft value
	2 index write # dataPointer itemsLeft
	swap 1 getPtr swap
	1 -
	dup
	{ 2 popN }
	enqueueLoop ifelse	
} enqueueLoop def

{ # queue
	# Check capacity
	dup queueIsEmpty call !
	{
		dup QSize get 1 - 1 index QSize set
		dup queueFrontPointer call swap
		dup QFront get 1 + 1 index QCapacity get % 1 index QFront set
	} if
	pop
} dequeue def
{ # queue
	# Check capacity
	dequeue call read
} dequeueSingle def