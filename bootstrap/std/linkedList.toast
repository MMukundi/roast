0 LinkedListSize def
1 LinkedListDataSize def
2 LinkedListHead def
3 LinkedListTail def
4 LinkedListProperties def
LinkedListProperties 8 * LinkedListBytes def

0 LinkedListNodePrev def
1 LinkedListNodeNext def
2 LinkedListNodeData def
3 1 - LinkedListNodeProperties  def # excludes data so the full size can be included
LinkedListNodeProperties 1- 8 * LinkedListNodeBytes def 

{ # dataSize
	LinkedListBytes array # dataSize linkedList
	swap 1 index LinkedListDataSize set # linkedList
	0 1 index LinkedListSize set
	0 1 index LinkedListHead set
	0 1 index LinkedListTail set
} createLinkedList def

{ # [...data...] prev next linkedList
	# 4 copy "a)LL: %d, next: %d, prev: %d, data: %d\n"c printf
	LinkedListDataSize get dup 8 * # [...data...] prev next dataSize dataBytes
	LinkedListNodeBytes + array # [...data...] prev next dataSize linkedListNode
	# 5 copy "b)LLN: %d, size: %d,next: %d, prev: %d, data: %d\n"c printf
	3 index 1 index LinkedListNodePrev set
	2 index 1 index LinkedListNodeNext set
	# 5 copy "c)LLN: %d, size: %d,next: %d, prev: %d, data: %d\n"c printf

	3 index {
		dup 4 index # [...data...] prev next dataSize linkedListNode linkedListNode prev
		LinkedListNodeNext set # [...data...] prev next dataSize linkedListNode
	} if # if prev not null
	# 5 copy "d)LLN: %d, size: %d,next: %d, prev: %d, data: %d\n"c printf
	
	2 index {
		dup 3 index # [...data...] prev next dataSize linkedListNode linkedListNode next
		LinkedListNodePrev set # [...data...] prev next dataSize linkedListNode
	} if # if next not null
	# 5 copy "e)LLN: %d, size: %d,next: %d, prev: %d, data: %d\n"c printf

	4 2 roll 2 popN # [...data...] dataSize linkedListNode
	# 3 copy "f)LLN: %d, size: %d, data: %d\n"c printf
	1 index 2+ 1 roll # linkedListNode [...data...] dataSize 
	# 3 copy "g) size: %d, data: %d, LLN: %d\n"c printf
	dup 1+ index # linkedListNode [...data...] dataSize linkedListNode
	# 4 copy "h)LLN: %d, size: %d, data: %d, LLN: %d\n"c printf
	LinkedListNodeData getPtr # linkedListNode [...data...] dataSize linkedListNodeData
	# 4 copy "i)LLND: %d, size: %d, data: %d, LLN: %d\n"c printf
	createLinkedListNodeLoop call # linkedListNode
} createLinkedListNode def
{ # value itemsLeft dataPtr
	1 index 
	{
		2 popN
	}
	{
		# 3 copy "i)DataPtr: %d, numLeft: %d, data: %d\n"c printf
		3 -1 roll 1 index # itemsLeft dataPtr value dataPtr
		# 4 copy "i)DataPtr: %d, val: %d, dataPtr: %d, numLeft: %d\n"c printf
		write
		1 getPtr # itemsLeft newPtr
		swap 1- swap # (itemsLeft-1) newPtr
		createLinkedListNodeLoop call
	} ifelse
} createLinkedListNodeLoop def

{ # [...data...] linkedList
	# 2 copy "a)LL: %d, data: %d\n"c printf
	dup LinkedListDataSize get # [...data...] linkedList dataSize
	# 3 copy "b)Size %d,LL: %d, data: %d\n"c printf
	swap # [...data...] dataSize linkedList
	1 index 2 + 1 roll # linkedList [...data...] dataSize
	# 3 copy "c)Size %d, data: %d, LL: %d\n"c printf
	index # linkedList [...data...] linkedList
	# 3 copy "d)LL %d, data: %d, LL: %d\n"c printf
	dup LinkedListTail get 0 # linkedList [...data...] linkedList tailNode 0
	# 5 copy "e)0: %d, tail:%d, LL %d, data: %d, LL: %d\n"c printf
	3 -1 roll # linkedList [...data...] tailNode 0 linkedList
	# 5 copy "f)LL: %d, null: %d, tail: %d, data: %d, ll2: %d\n"c printf
	createLinkedListNode call # linkedList newNode
	dup 2 index LinkedListTail set # linkedList newNode
	1 index LinkedListHead get # linkedList newNode head
	{
		swap LinkedListHead set
	}
	{
		2 popN
		# pop
		# dup LinkedListHead get "Head %d! "c printf
		# LinkedListTail get "Tail %d!\n"c printf
	} ifelse
} linkedListAppend def


{ # [...data...] linkedList
	dup LinkedListDataSize get # [...data...] linkedList dataSize
	swap # [...data...] dataSize linkedList
	1 index 2 + 1 roll # linkedList [...data...] dataSize
	index # linkedList [...data...] dataSize linkedList
	dup LinkedListHead get 0 swap # linkedList [...data...] linkedList 0 head
	3 -1 roll # linkedList [...data...] 0 head linkedList
	# 5 copy "f)LL: %d, null: %d, tail: %d, data: %d, ll2: %d\n"c printf
	createLinkedListNode call # linkedList newNode	
	dup 2 index LinkedListHead set # linkedList newNode
	1 index LinkedListTail get # linkedList newNode head
	{
		swap LinkedListTail set
	}
	{
		2 popN
		# pop
		# dup LinkedListHead get "Head %d! "c printf
		# LinkedListTail get "Tail %d!\n"c printf
	} ifelse
} linkedListPrepend def

{ # linkedList func
	swap LinkedListHead get linkedListForEachLoop call
} linkedListForEach def
{ # func linkedListNode
	# dup "Node %d "c printf
	dup
	{ # 0 func
		2 popN
	}
	{ # linkedListNode func
		2 copy # func linkedListNode func linkedListNode
		LinkedListNodeData getPtr swap # func linkedListNode linkedListData func
		call
		LinkedListNodeNext get # func nextNode
		linkedListForEachLoop call
	} ifelse
} linkedListForEachLoop def

{ # linkedList func
	swap LinkedListTail get linkedListReverseForEachLoop call
} linkedListReverseForEach def
{ # func linkedListNode
	# dup "Node %d "c printf
	dup
	{ # 0 func
		2 popN
	}
	{ # linkedListNode func
		2 copy # func linkedListNode func linkedListNode
		LinkedListNodeData getPtr swap # func linkedListNode linkedListData func
		call
		LinkedListNodePrev get # func nextNode
		linkedListReverseForEachLoop call
	} ifelse
} linkedListReverseForEachLoop def

3 linkedListFindSkip def

{ # linkedList pred
	swap LinkedListHead get linkedListFindFirstLoop call
} linkedListFindFirst def
{ # pred linkedListNode
	dup
	{ # pred linkedListNode
		swap pop
	}
	{ # pred linkedListNode
		2 copy # pred linkedListNode pred linkedListNode
		LinkedListNodeData getPtr # pred linkedListNode pred linkedListData
		swap 1 index swap  # pred linkedListNode linkedListData linkedListData pred
		call # pred linkedListNode linkedListData shouldReturn
		{
			pop
			LinkedListNodeNext get # pred nextNode
			linkedListFindFirstLoop call
		}
		{
			swap pop swap pop # data
		} ifelse
	} ifelse
} linkedListFindFirstLoop def

{ # linkedList pred
	swap LinkedListTail get linkedListFindLastLoop call
} linkedListFindLast def
{ # pred linkedListNode
	dup
	{ # pred linkedListNode
		swap pop
	}
	{ # pred linkedListNode
		2 copy # pred linkedListNode pred linkedListNode
		LinkedListNodeData getPtr # pred linkedListNode pred linkedListData
		swap 1 index swap  # pred linkedListNode linkedListData linkedListData pred
		call # pred linkedListNode linkedListData shouldReturn
		{
			pop
			LinkedListNodePrev get # pred nextNode
			linkedListFindLastLoop call
		}
		{
			swap pop swap pop # data
		} ifelse
	} ifelse
} linkedListFindLastLoop def

{ 1 getPtr } linkedListNodeData def
