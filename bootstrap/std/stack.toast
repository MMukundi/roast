%once
0 StackCapacity def
1 StackItemSize def
2 StackData def
4 StackSize def
5 NumberStackProperties def

{ # itemSize capacity
	2 copy * # itemSize capacity totalSize
	8* array # itemSize capacity Array[totalSize]
	NumberStackProperties 8*  array # itemSize capacity Array[totalSize] stack
	4 -2 roll # Array[totalSize] stack itemSize capacity 
	2 index StackCapacity set # Array[totalSize] stack itemSize 
	1 index StackItemSize set # Array[totalSize] stack 
	swap 1 index StackData set # stack
	0 1 index StackSize set # stack
} createStack def

{ # stack
	StackSize get
} stackSize def

{ # stack
	dup StackCapacity get swap StackSize get =
} stackIsFull def

{ # stack
	StackSize get 0 =
} stackIsEmpty def

{ # stack index
	swap # index stack
	0 index StackData get # index stack dataPtr
	1 index stackSize call 1 - # index stack dataPtr lastIndex
	4 -1 roll - # stack dataPtr (lastIndex+index)
	3 -1 roll # dataPtr (lastIndex+index) stack
	StackItemSize get # dataPtr (lastIndex+index) itemSize
	* 
	getPtr # &dataPtr[(lastIndex+index)*itemSize]
} stackIndexPointer def

{ # stack index
	stackIndexPointer call read
} stackIndex def

{ # stack 
	0 stackIndex call
} stackTop def

{ # stack 
	0 stackIndexPointer call
} stackTopPointer def

{ # stack value
	swap
	# Check capacity
	dup stackIsFull call !
	{
		dup StackSize get dup 1 +  2 index StackSize set
		1 index StackItemSize get * 
		swap StackData get swap set
	} if
} stackPushSingle def
{ # [...data...] stack
	# Check capacity
	dup stackIsFull call !
	{
		dup StackSize get dup 1 +  2 index StackSize set
		1 index StackItemSize get 
		swap 1 index * # value stack itemSize index
		3 -1 roll # value itemSize index stack
		StackData get # value itemSize index dataPtr 
		swap getPtr # value itemSize itemPtr 
		swap stackPushLoop call
	} if
} stackPush def
{ # value dataPointer itemsLeft
	3 2 roll # dataPointer itemsLeft value
	2 index write # dataPointer itemsLeft
	swap 8 + swap
	1 -
	dup
	stackPushLoop if
	2 popN
} stackPushLoop def

{ # stack
	# Check capacity
	dup stackIsEmpty call !
	{
		dup stackTop call
		swap
		dup StackSize get 1 - swap StackSize set
	} if
} stackPopSingle def

{ # stack
	# Check capacity
	dup stackIsEmpty call !
	{
		dup stackTopPointer call
		swap
		dup StackSize get 1 - swap StackSize set
	} if
} stackPop def
