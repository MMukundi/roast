%<linkedList>

2 createLinkedList call

dup "Linked list[%d]\n"c printf
 
1 0 2 index linkedListAppend call
3 2 2 index linkedListAppend call
5 4 2 index linkedListAppend call
{ #pairPtr
	dup {
		pop "null\n" print
	}
	{
		dup 0 get "(%d,"c printf
		1 get " %d)\n"c printf
	} ifelse
} printPair def

"Forward\n" print
dup printPair linkedListForEach call

-1 -2 2 index linkedListPrepend call
-3 -4 2 index linkedListPrepend call

"Forward(after prepending)\n" print
dup printPair linkedListForEach call

"Reverse\n" print
dup printPair linkedListReverseForEach call

dup {
	read 2 % 0 = 
} linkedListFindFirst call
# dup printNum

"Found first:" print
printPair call


# "\n" print
dup {
	read 2 % 0 = 
} linkedListFindLast call
# dup printNum
"Found last: " print
printPair call
# "\n" print
dup {
	read 3 = 
} linkedListFindLast call
# dup printNum
"3 search: " print
printPair call

# "\n" print
dup {
	read 0 = 
} linkedListFindFirstNode call
dup linkedListNodeData call
# dup printNum
"0 search: " print
printPair call
# 2 copy "node: %d, ll: %d\n"c printf
1 index swap linkedListRemoveNode call
"Without zero: " print
dup printPair linkedListForEach call
dup printPair linkedListReverseForEach call


# "\n" print
dup {
	read 2 = 
} linkedListFindFirstNode call
dup linkedListNodeData call
# dup printNum
"2 search: " print
printPair call
# 2 copy "node: %d, ll: %d\n"c printf
1 index swap linkedListRemoveNode call
"Without two: " print
dup printPair linkedListForEach call
dup printPair linkedListReverseForEach call
# node bootstrap/js/toast.js examples/linkedList.toast -od bin -p