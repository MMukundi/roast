%<linkedList>

2 createLinkedList call

1 0 2 index linkedListAppend call
3 2 2 index linkedListAppend call
5 4 2 index linkedListAppend call
{ #pairPtr
	dup 0 get "(%d,"c printf
	1 get " %d)\n"c printf
} printPair def

"Forward\n" print
dup printPair linkedListForEach call

-1 -2 2 index linkedListPrepend call

"Forward(after prepending)\n" print
dup printPair linkedListForEach call

"Reverse\n" print
dup printPair linkedListReverseForEach call

dup {
	read 2 % 0 = 
} linkedListFindFirst call
# dup printNum

"Found first:" print
dup
{
	"null" print
}
printPair
ifelse

# "\n" print
dup {
	read 2 % 0 = 
} linkedListFindLast call
# dup printNum
"Found last: " print
dup
{
	"null" print
}
printPair ifelse
# "\n" print
dup {
	read 3 = 
} linkedListFindLast call
# dup printNum
"3 search: " print
dup
{
	"null" print
}
printPair ifelse
# node bootstrap/js/toast.js examples/linkedList.toast -od bin -p