0 empty def
[ 
	" "c 
	"X"c 
	"O"c 
] playerStrings def

"%s|%s|%s\n" pop rowString def
"-----\n" pop sepString def
3 boardSize def
[ 
		# rows
		[ 0 1 2 ] [ 3 4 5 ] [ 6 7 8 ]
		# Cols
		[ 0 3 6 ] [ 1 4 7 ] [ 2 5 8 ]

		# Diag
		[ 0 4 8 ] [ 2 4 6 ]
]
winSet def
"0" pop debugInput def
boardSize boardSize * cellCount def
cellCount 1 + cellCountAndTurn def

{
	0 index 2 get playerStrings swap get
	1 index 1 get playerStrings swap get
	2 index 0 get playerStrings swap get
	rowString printf	
	sepString printf

	0 index 5 get playerStrings swap get
	1 index 4 get playerStrings swap get
	2 index 3 get playerStrings swap get

	rowString printf
	sepString printf

	0 index 8 get playerStrings swap get
	1 index 7 get playerStrings swap get
	2 index 6 get playerStrings swap get

	rowString printf
	pop
} printBoard def

{
	"Player " print
	1+ printNum
	"'s turn\n" print
} printTurn def
{
	cellCountAndTurn copy
} copyState def

{
	dup
	1 get
	printTurn call
	dup
	0 get
	printBoard call
	pop
} printState def
# {
# 	# condFunc block

# 	1 index call
# 	# call
# 	{
# 		# dup call
# 		while
# 		"True!" pop printf
# 	}
# 	if
# } while def

[
	# Board
	[ 
	empty empty empty 
	empty empty empty 
	empty empty empty 
	# 1 1 1
	]
	
	# [ 
	# 	0 1 1 
	# 	2 3 5 
	# 	8 13 21 
	# ]

	# Turn Counter
	0
]

# printState call

# "3819" pop stringToInt printNum
{
	# ... data:Any func:FuncPtr
	# func: A function run each loop, returns a bool
	# data: the input to the dowhile

	2 copy
	call
	{
		2 popN
	}
	{
		doWhile call
	}
	ifelse
} doWhile def

{ + readByte } getChar def
{ dup getChar call } copyChar def
{ + 1 print } printChar def


{
	[ dup 0 ] dup
	{ 	# [PRESERVED] [ state index ]
		dup 0 get # [ state index ] state
		printState call  # [ state index ] state
		dup 0 get 0 get # [ state index ] board
	
		# [ 1 2 3 4 5 6 7 8 9]
		# printBoard call
		"Pick an open spot [Enter a number 1-9]: " print # [ state index ] board
		#... n:int

		## Use the numbers 1-9 in order
		# debugInput dup dup readByte 
		# dup 57 < { 3 exit }{ 1+ } ifelse
		# writeByte

		## Use user input
		input pop # [ state index ] board cellIndexStr

		## Use the number 6 every time
		# "6" pop	

		stringToInt 1 - # [ state index ] board cellZeroBasedIndex
		# dup "Index: %d\n"c printf

		# store index
		dup # [ state index ] board cellZeroBasedIndex cellZeroBasedIndex
		3 index # [ state index ] board cellZeroBasedIndex cellZeroBasedIndex [ state index ]
		1 set # [ state index ] board cellZeroBasedIndex { index set }

		dup dup # [ state index ] board cellZeroBasedIndex cellZeroBasedIndex cellZeroBasedIndex
		-1 > # [ state index ] board cellZeroBasedIndex cellZeroBasedIndex cellIsNotNeg
		swap 9 < # [ state index ] board cellZeroBasedIndex cellIsNotNeg cellLessThan10 
		# And
		# dup "InRange: %d\n"c printf
		
		* # [ state index ] board cellZeroBasedIndex cellInRange

		3 1 roll # [ state index ] cellInRange state cellZeroBasedIndex
		get  # [ state index ] cellInRange cellValue
		0 = # [ state index ] cellInRange cellIsEmpty
		# dup "IsEmpty: %d\n"c printf
		* # [ state index ] cellIsValid

		#negate
		! # [ state index ] cellIsInvalid
		dup {
			"Invalid spot. Please try again.\n" print
		}
		if # [ state index ] cellIsInvalid
		swap pop # cellIsInvalid
		# 14 copy "%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n"c printf
	}
	doWhile call
	1 get # index
	swap pop
} getCellIndex def
{ # [ board turnCounter ]
	dup
	getCellIndex call  # [ board turnCounter ] index

	1 index # [ board turnCounter ] index [ board turnCounter ] 
	0 get # [ board turnCounter ] index board
	2 index  # [ board turnCounter ] index board [ board turnCounter ]
	1 get 1 + # [ board turnCounter ] index board (turnCounter+1)
	3 1 roll # [ board turnCounter ] (turnCounter+1) index board
	swap # [ board turnCounter ] (turnCounter+1) board index
	set # [ board turnCounter ] { board[index] = (turnCounter+1) }
	dup # [ board turnCounter ] [ board turnCounter ]
	1 get # [ board turnCounter ] turnCounter
	! # [ board turnCounter ] (!turnCounter)
	1 index 1 set # [ board !turnCounter ]

} run def

{ # [board turnCount]
	[
		dup 0 get  # [board turnCount] [ board
		winSet  # [board turnCount] [ board winSet
		0 #  [board turnCount] [ board winSet index
	]#  [board turnCount] [board winSet index] [board winSet index]
	dup {
		# - [board winSet index]

		dup
		# - [board winSet index] [board winSet index]

		dup 2 get
		# - [board winSet index] [board winSet index] index

		swap 1 get swap
		# - [board winSet index] winSet index

		get
		# - [board winSet index] winIndecies
		
		1 index 0 get swap
		# - [board winSet index] board winIndecies

		1 index 1 index # - [board winSet index] board winIndecies board winIndecies
		0 get  # - [board winSet index] board winIndecies board winIndecies[0]
		get  # - [board winSet index] board winIndecies board[winIndecies[0]]

		2 index 2 index # - [board winSet index] board winIndecies board[winIndecies[0]] board winIndecies 
		1 get  # - [board winSet index] board winIndecies board[winIndecies[0]] board winIndecies[1]
		get  # - [board winSet index] board winIndecies board[winIndecies[0]] board[winIndecies[1]]

		3 index 3 index # - [board winSet index] board winIndecies board[winIndecies[0]] board[winIndecies[1]] board winIndecies
		2 get  # - [board winSet index] board winIndecies board[winIndecies[0]] board[winIndecies[1]] board winIndecies[2]
		get  # - [board winSet index] board winIndecies board[winIndecies[0]] board[winIndecies[1]] board[winIndecies[2]]

		5 -2 roll
		# - [board winSet index] board[winIndecies[0]] board[winIndecies[1]] board[winIndecies[2]] board winIndecies

		2 popN
		# - [board winSet index] board[winIndecies[0]] board[winIndecies[1]] board[winIndecies[2]]

		# TODO: Instead of printNums

		2 index
		# - [board winSet index] board[winIndecies[0]] board[winIndecies[1]] board[winIndecies[2]] board[winIndecies[0]]

		4 1 roll
		# - [board winSet index] board[winIndecies[0]] board[winIndecies[0]] board[winIndecies[1]] board[winIndecies[2]]

		1 index
		# - [board winSet index] board[winIndecies[0]] board[winIndecies[0]] board[winIndecies[1]] board[winIndecies[2]] board[winIndecies[1]]

		=
		# - [board winSet index] board[winIndecies[0]] board[winIndecies[0]] board[winIndecies[1]] (board[winIndecies[2]] = board[winIndecies[1]])

		3 1 roll
		# - [board winSet index] board[winIndecies[0]] (board[winIndecies[2]] = board[winIndecies[1]]) board[winIndecies[0]] board[winIndecies[1]] 

		=
		# - [board winSet index] board[winIndecies[0]] (board[winIndecies[2]] = board[winIndecies[1]]) (board[winIndecies[0]]=board[winIndecies[1]])

		*
		# - [board winSet index] board[winIndecies[0]] (board[winIndecies[0]] = board[winIndecies[1]] = board[winIndecies[2]])

		1 index 0 !=
		# - [board winSet index] board[winIndecies[0]] (board[winIndecies[0]] = board[winIndecies[1]] = board[winIndecies[2]]) (board[winIndecies[0]] != 0)

		*
 		# - [board winSet index] board[winIndecies[0]] ((board[winIndecies[0]] = board[winIndecies[1]] = board[winIndecies[2]]) && (board[winIndecies[0]] != 0))

		*
 		# - [board winSet index] matchFound

		dup { # - [board winSet index] 0
			pop dup # [board winSet index] [board winSet index]
			2 get # [board winSet index] index
			1+ dup # [board winSet index] (index+1) (index+1)
			8 < # [board winSet index] (index+1) (index+1 < 8)
		}
		{ # - [board winSet index] playerIndex
			0 # - [board winSet index] playerIndex 0
		}
		ifelse # - [board winSet index] newIndex shouldContinue
		swap 2 index  # - [board winSet index] shouldContinue newIndex [board winSet index]
		2 set # - [board winSet newIndex] shouldContinue {[board winSet index][2] = newIndex)
		swap pop
	} 
	doWhile call # [board turnCount] [board winSet index]

	# remove the board and winIndecies
	2 get # [board turnCount] index

	# If there's an 8 at the top of the stack, nobody won yet
	dup 8 =
	{
		pop 
		0
	}
	if
	# otherwise just return their number
} checkWin def

# Board
dup { # [board turnCount] 
	run call # [board turnCount]
	# 6 copy "Board2:%d\nLoopFunc:%d\nBoard1: %d\nBoardOrig: %d\nArgc: %d\nArgV: %d\n"c printf

	# "printNum" print
	checkWin call # [board turnCount] winnerNumber
	# 7 copy "index: %d\nBoard2:%d\nLoopFunc:%d\nBoard1: %d\nBoardOrig: %d\nArgc: %d\nArgV: %d\n"c printf
	dup
	{ # [board turnCount] 0
		pop pop 1
	}
	{ # [board turnCount] winnerNumber
		"Player %d wins!\n"c printf
		0 get
		printBoard call
		pop
		0
	}
	ifelse
} doWhile call


# [0] { 	
# 	#... [n:int]
# 	dup 0 get dup # [n] n n
# 	"Num: %d\n" pop printf # [n] n
# 	# Increment
# 	1+ # [n] (n+1)
# 	2 copy swap 0 set # [n+1] (n+1)

# 	#Check Size (and negate)
# 	5 <= # [n+1] (n+1<=5)
# 	swap pop
# }
# doWhile call

