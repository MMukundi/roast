%<hashTable>

{
	dup
	{ pop "Null\n"c printf }
	{ read "Value[%d]\n"c printf }
	ifelse
} displayNode def

{ strEq } hashString 23 createHashTable call

dup "carmel"c hashTableGet call "'carmel': " print displayNode call
dup hashTableSize call "Size %d\n"c printf

dup "carmel"c 1 hashTableInsert call
dup "carmel"c hashTableGet call "'carmel': " print displayNode call
dup hashTableSize call "Size %d\n"c printf

dup "carmel"c 2 hashTableInsert call
dup "carmel"c hashTableGet call "'carmel': " print displayNode call
dup hashTableSize call "Size %d\n"c printf

dup "carmels"c 3 hashTableInsert call
dup "carmels"c hashTableGet call "'carmels': " print displayNode call
dup hashTableSize call "Size %d\n"c printf

dup "carmels"c hashTableHas call "Has 'carmels': %d\n"c printf
dup "carmel"c hashTableHas call "Has 'carmel': %d\n"c printf
dup "carma"c hashTableHas call "Has 'carma': %d\n"c printf

dup "carmels"c hashTableDelete call
"Had carmels?: %d\n"c printf
dup "carma"c hashTableDelete call
"Had carma?: %d\n"c printf
dup "carmels"c hashTableGet call "'carmels': " print displayNode call
dup hashTableSize call "Size %d\n"c printf

dup "carmels"c hashTableHas call "Has 'carmels': %d\n"c printf
dup "carmel"c hashTableHas call "Has 'carmel': %d\n"c printf
dup "carma"c hashTableHas call "Has 'carma': %d\n"c printf