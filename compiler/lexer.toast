%once
%"./token.toast"
%"./utils.toast"
%<logic>
%<linkedList>
# %<hashTable>
%<stack>


5 lexerBufferSize def

0 ScopePrevTokenStack def
1 ScopeNextTokenQueue def
2 ScopeProperties def
ScopeProperties 8 * ScopeBytes def

0 HasNextLine def
# 1 Line def
# 2 LineOffset def
1 Path def
2 FileDescriptor def
3 BytesRead def
4 Pointer def
5 OutputFd def
6 Buffer def
7 InputPath def
8 ScopeStack def
9 Location def
10 NumberOfLexerProperties def
NumberOfLexerProperties 8 * LexerBytes def

NumberOfLexerProperties createStack IncludeStack def


10 MaxBufferedTokens def

{ # lexer
	0 index OutputFd get
	1 index Pointer get

	2 index BytesRead get
	3 index FileDescriptor get
	4 index Path get

	5 index Location get
	dup locationGetLine call
	swap locationGetColumn call

	7 index HasNextLine get

	8 index InputPath get
"Lexer	{
	File: \"%s\"
	HasNext:         %d
	LineNumber:      %d
	LineOffset:      %d
	PathPointer:     %d
	FileDesciptor:   %d
	BytesRead:       %d
	LexerPointer:    %d
	OutputFileDesc:  %d
}
"c printf
pop
} debugLexer def

# Token indecies
# 0 TokType def
# 1 TokValue def

# 0 ValueTokenType def

{ # inputFilePath
	LexerBytes buffer # inputFilePath lexer
	# 8 8 * buffer # inputFilePath lexer

	0 1 index HasNextLine set # inputFilePath lexer
	1 index 0 0 makeLocation call 1 index Location set # inputFilePath lexer

	0 1 index Path set # inputFilePath lexer
	0 1 index FileDescriptor set # inputFilePath lexer
	0 1 index BytesRead set # inputFilePath lexer

	0 1 index Pointer set # inputFilePath lexer
	0 1 index OutputFd set # inputFilePath lexer
	lexerBufferSize buffer 1 index Buffer set # inputFilePath lexer

	2 copy # inputFilePath lexer inputFilePath lexer
	Path set # inputFilePath lexer
	1 index # inputFilePath lexer inputFilePath
	readOpen # inputFilePath lexer inputFileDescriptor
	1 index # inputFilePath lexer inputFileDescriptor lexer
	FileDescriptor set # inputFilePath lexer

	1 1 index HasNextLine set # inputFilePath lexer

	"./out.asm"c writeOpen # inputFilePath lexer outFd
	1 index OutputFd set # inputFilePath lexer

	# TODO: REPLACE STDLIB PATH WITH ACCURATE PATH
"%include \"std.asm\"
	global _main
	default rel

	section .text
_main:
" # inputFilePath lexer preamble
	2 index OutputFd get # inputFilePath lexer preamble outFd
	fprint # inputFilePath lexer

	# MaxBufferedTokens TokenSize * buffer 1 index PreviousTokens set
	# MaxBufferedTokens TokenSize * buffer 1 index NextTokens set
	swap 1 index InputPath set
	dup lexerFillBuffer call
	# TODO: This gets rid of the number of bytes read. Later, use this to check if the file ended
	# lexer BytesRead get
	# "Inited lexer with %d bytes\n" pop printf

} createLexer def


{ # lexer
	dup HasNextLine get # lexer hasNextLine
	{
		dup FileDescriptor get swap # fileDescriptor lexer
		dup Buffer get swap # fileDescriptor buffer lexer
		3 1 roll # lexer fileDescriptor buffer
		lexerBufferSize readFileTo # lexer bytesRead
		1 index BytesRead set # lexer
		
		dup BytesRead get lexerBufferSize = # lexer bufferIsFull
		1 index HasNextLine set # lexer
	} if
	dup Buffer get
	1 index Pointer set
	pop
} lexerFillBuffer def

{  # lexer curr end
	2 copy <
	{
		3 popN
	}
	{
		2 index Location get
		2 index readByte '\n' =
		{
			dup locationIncrementLine call
			-1 1 index locationSetColumn call
		} if
		locationIncrementColumn call
		swap 1 + swap
		lexerUpdatePosition call
	} ifelse
} lexerUpdatePosition def # TODO: Rename to something to do with 'track position'/'handle newlines', etc


{ # lexer goalgoalLexerPtr
	dup # lexer goalLexerPtr goalLexerPtr
	2 index Buffer get # lexer goalLexerPtr goalLexerPtr lexerBuffer
	3 index BytesRead get # lexer goalLexerPtr goalLexerPtr lexerBuffer bytesRead
	+ < # lexer goalLexerPtr (goalLexerPtr < lexerBuffer+ bytesRead)
	# debugLexer call
	{ # lexer goalLexerPtr
		2 copy # lexer goalLexerPtr lexer goalLexerPtr
		1 index BytesRead get
		2 index Buffer get +
		lexerUpdatePosition call # lexer goalLexerPtr

		1 index HasNextLine get
		{# lexer goalLexerPtr
			pop
			0 index Buffer get 
			1 index BytesRead get
			+
		}
		{# lexer goalLexerPtr
			lexerBufferSize -
			1 index lexerFillBuffer call
			lexerAdvanceLoop call
		}
		ifelse
	}
	{ # lexer goalLexerPtr
		dup
		2 index Pointer get
		swap
		lexerUpdatePosition call
	} ifelse
	swap Pointer set
} lexerAdvanceLoop def 

{ Pointer get readByte } lexerCurrentChar def # lexer
{ # lexer
	dup Location get swap # location lexer
	dup lexerCurrentChar call swap # location char lexer
	3 1 roll # lexer location char
	'\n' =

	locationIncrementColumn
	locationIncrementLine
	ifelse # lexer

	0 index Pointer get # lexer ptr
	dup readByte swap 1+ # lexer currChar newPtr
	2 index Buffer get
	3 index BytesRead get + >=
	{ # lexer currChar
		swap 
		dup Pointer get 1 +
		swap Pointer set # currChar
	}
	{ # lexer currChar
		#out of range
		swap # currChar lexer
		lexerFillBuffer call # currChar
	} ifelse # currChar
	# dup "C'%c'"c printf
} lexerAdvanceOne def # lexer

{ # lexer
	# if there are no more lines
	0 index HasNextLine get !
	# dup "NoMoreLines? %d "c printf

	# and the ponter is at the end of the buffer
	# (
	1 index BytesRead get 0 <=
	2 index BytesRead get 1 - #1 -
	3 index Pointer get 
	4 index Buffer get 
	# 3 copy "%d %d %d"c printf
	# 3 copy "(buff %d, ptr %d, bytes %d)"c printf
	- =
	|
	# dup "EndOfBuff? %d "c printf

	# )
	& swap pop
	# dup "Done? %d\n"c printf
} lexerIsDone def

5 advanceWhileSkip def
{ # strStart lexer predicate strPtr
	{
		2 index lexerCurrentChar call
		2 index call
	}
	{# strStart lexer predicate strPtr otherBlock
		3 index lexerIsDone call ! # strStart lexer predicate strPtr otherBlock isDone
		5 index 3 index 
		> |
	}
	shortCircuitAnd call
	{
		0 1 index writeByte
		swap pop swap pop
	}
	{
		2 index lexerIsDone call
		3 index lexerAdvanceOne call
		
		2 index writeByte
		swap 1 + swap !
		{ swap pop swap pop }
		lexerAdvanceWhileLoop ifelse
	} ifelse
} lexerAdvanceWhileLoop def
{ # lexer predicate
	50 buffer
	3 1 roll
	2 index
	lexerAdvanceWhileLoop call
	pop
} lexerAdvanceWhile def
{ # lexer predicate buffer
	3 1 roll
	2 index
	lexerAdvanceWhileLoop call
	swap pop
} lexerAdvanceWhileBuffer def

{ # lexer predicate
	{
		# "Calling" print
		1 index lexerCurrentChar call
		1 index call
	}
	{
		2 index lexerIsDone call !
	}
	shortCircuitAnd call

	{
		2 popN
	}
	{
		1 index lexerAdvanceOne call pop
		lexerAdvanceWhileNoString call
	} ifelse
} lexerAdvanceWhileNoString def

{ # lexer count
	1 index Pointer get + # lexer lexerPtr
	1 index swap # lexer lexer lexerPtr
	lexerAdvanceLoop call # lexer
	
	0 index Buffer get
	1 index BytesRead get +
	dup
	2 index Pointer get 
	<
	{
		2 popN
	}
	{
		# debugBuffers call
		swap Pointer set 
		# debugBuffers call
	} ifelse	
} lexerAdvance def

{ isWhitespace lexerAdvanceWhileNoString call } lexerSkipWhitespace def # lexer

{ # lexer
	dup lexerCurrentChar call # lexer char
	'#' =
	{
		pop
	}
	{
		dup { '\n' != } lexerAdvanceWhileNoString call
		dup lexerSkipWhitespace call
		lexerSkipComments call
	} ifelse
} lexerSkipComments def # lexer

{ # lexer
	# dup "Lexer[%d]"c printf
	# dup lexerCurrentChar call "Current char: %d\n"c printf
	dup lexerSkipWhitespace call
	dup lexerSkipComments call
	dup lexerIsDone call !
	{
		pop 0
	}
	{
		0 index Location get 
		copyLocation call # lexer location
		1 index lexerCurrentChar call # lexer location char
		# dup "Current char: %c\n"c printf
		
		# dup dup '-' = swap '%' = |
		dup '-' = 
		{
			dup # lexer location char char
		}
		{
			pop 2 index lexerAdvanceOne call # lexer location prevChar
			2 index lexerCurrentChar call # lexer location prevChar currChar
		} ifelse # lexer location prevChar currChar
		
		# 2 copy "Curr[%c], Prev[%c]\n"c printf
		dup isDigit call
		{
			# lexer location prevChar currChar
			dup isOperation call
			{
				1 index '-' = 1 index shouldEndName call &
				{
					20 buffer dup # lexer location prevChar currChar buffer buffer

					3 index '-' =
					{
						'-' 1 index writeByte 
						1 getBytePtr
					} if
					# lexer location prevChar currChar buffer currBuffPtr
					
					# Write current char
					# 2 index 1 index writeByte
					# 1 getBytePtr

					5 index { shouldEndName call ! } 2 index lexerAdvanceWhileBuffer call
					
					swap pop # lexer location prevChar currChar buffer bufferEnd
					
					5 index lexerIsDone call
					{
						5 index lexerCurrentChar call
						1 index writeByte
						1 getBytePtr
						0
						1 index writeByte
						1 getBytePtr
					} if
					
					pop
					# 5 copy "%d %d %d %d %d\n"c printf

					NameToken swap # lexer location prevChar currChar buffer [NameToken]
					4 index swap
					makeToken call
				}
				{
					OperatorToken 3 index '-'
					makeToken call
				} ifelse
			}
			{
				OperatorToken 3 index
				5 index lexerAdvanceOne call
				makeToken call
			}
			ifelse
		}
		{ 
			# lexer location prevChar currChar
			3 index isDigit lexerAdvanceWhile call # lexer location prevChar currChar str
			stringToInt # lexer location prevChar currChar parsedNum
			1 index '-' = # lexer location prevChar currChar parsedNum isNeg
			{ -1 * } if # lexer location prevChar currChar parsedNum
			IntToken swap # lexer location prevChar currChar [IntToken] parsedNum
			4 index swap # lexer location prevChar currChar [IntToken] location parsedNum
			makeToken call
		} ifelse
		5 1 roll
		4 popN
	} ifelse
} lexerGetToken def # lexer

{ # tokens lexer
	dup lexerIsDone call !
	{
		pop
	}
	{
		dup lexerGetToken call
		dup {
			2 popN
		}
		{
			dup debugToken call
			2 index linkedListAppend call
			lexerGetTokensLoop call
		} ifelse
	} ifelse
} lexerGetTokensLoop def

{ # lexer
	1 createLinkedList call
	swap
	lexerGetTokensLoop call
} lexerGetTokens def

{ OutputFd get close } lexerCloseOutput def # lexer

{  2 index OutputFd get fprint pop } lexerOutPrint def # lexer string size
{  swap OutputFd get fprintf } lexerOutPrintf def # [...data...] lexer formatString
# node bootstrap/js/toast.js compiler/lexer.toast -od bin -p