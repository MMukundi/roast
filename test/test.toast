%<command>

"/usr/local/bin/node"c NodeHome def
"/usr/local/bin/nasm"c NasmHome def
"/bin/ld"c LinkerHome def
[ NodeHome "bootstrap/js/toast.js"c 0 "-od"c "bin"c 0 ] testArgs def

{ 2 index 0 > { 3 popN } { 2 copy swap read swap call swap 8+ swap 3 -1 roll 1 - 3 1 roll foreachCore call } ifelse } foreachCore def # numLeft arrPtr func 
{ swap dup length swap 3 -1 roll foreachCore call } foreach def # arr func 


[
	"test/queue.toast"c
	"test/stack.toast"c
	"test/array.toast"c
	"test/math.toast"c
	"test/memcopy.toast"c
]
{
	dup "----Running test [%s]-----\n"c printf
	# [ dup NodeHome "bootstrap/js/toast.js"c 3 -1 roll "-od"c "bin"c 0 ]
	dup testArgs 2 set testArgs
	# swap pop
	NodeHome
	command call
	swap 1 index swap
	"----Exited[%s](Code %d)-----\n"c printf
	pop
	# 2 popN
}
foreach call
# [ NodeHome "bootstrap/js/toast.js"c "test/test.toast"c 0 ]
# NodeHome
# command call

# node bootstrap/js/toast.js test/test.toast -od bin -p