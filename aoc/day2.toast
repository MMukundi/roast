"forward 6
down 3
forward 8
down 5
forward 9
down 2
up 9
down 9
forward 8
down 3
down 8
forward 2
down 1
up 3
up 6
up 9
down 7
up 7
down 1
forward 7
down 7
up 4
down 2
forward 8
up 3
up 1
down 1
down 6
up 2
down 5
forward 4
down 5
down 3
forward 4
down 3
up 8
forward 1
up 9
forward 2
up 7
down 2
down 9
down 1
down 6
down 8
down 6
down 1
down 1
down 9
down 9
down 2
forward 9
down 1
forward 4
down 2
forward 6
down 8
forward 4
forward 8
forward 4
forward 4
up 4
up 9
down 6
forward 2
forward 5
down 2
forward 1
down 9
forward 2
down 8
down 2
forward 5
down 7
forward 7
down 4
up 3
down 9
forward 3
down 7
up 4
down 5
down 4
forward 8
down 2
down 2
forward 9
down 9
down 5
down 1
down 5
forward 5
down 1
up 7
down 2
forward 7
forward 6
forward 5
forward 4
down 3
forward 9
up 1
down 1
up 8
down 4
down 7
forward 2
down 1
up 9
up 3
down 4
down 1
down 9
down 4
forward 4
forward 7
down 7
down 1
up 6
forward 8
down 8
forward 2
down 4
up 4
forward 3
down 1
up 8
up 2
forward 3
forward 5
forward 7
down 5
up 2
down 6
forward 9
forward 3
down 1
forward 7
up 1
down 4
up 2
forward 5
down 1
forward 2
down 3
forward 9
down 1
down 6
down 7
up 9
down 5
down 1
forward 5
forward 7
down 6
forward 1
down 3
forward 3
forward 1
down 7
forward 9
forward 7
forward 4
up 1
down 8
up 8
down 3
forward 9
up 2
down 4
down 4
down 3
forward 7
forward 3
down 5
up 4
up 7
down 6
forward 2
down 2
down 9
down 9
down 7
down 7
forward 5
forward 8
up 2
forward 9
forward 5
down 2
up 6
down 2
up 2
down 6
down 3
down 2
down 3
down 9
forward 6
up 9
down 3
forward 9
forward 4
forward 1
down 3
down 4
forward 8
forward 4
down 7
forward 9
forward 2
forward 9
down 2
down 3
down 1
down 6
forward 5
down 3
forward 1
down 3
forward 7
down 3
forward 3
up 2
up 8
down 2
down 3
down 7
forward 6
forward 7
up 5
forward 4
forward 6
down 1
forward 1
forward 9
down 2
down 8
forward 6
down 8
down 5
forward 9
forward 3
down 6
forward 3
forward 1
up 7
down 2
down 9
up 6
forward 7
down 9
up 8
forward 5
forward 2
forward 9
down 3
up 7
forward 7
down 4
up 6
up 5
forward 6
forward 2
down 9
forward 9
forward 3
down 4
forward 5
forward 4
forward 4
down 8
forward 4
forward 2
up 8
down 8
forward 6
up 4
down 7
forward 8
up 9
forward 3
forward 5
forward 8
down 5
up 6
up 6
down 5
forward 2
down 3
up 1
down 8
forward 3
down 4
up 9
forward 8
forward 5
forward 2
forward 6
forward 8
up 5
forward 5
down 2
down 4
down 8
forward 3
up 9
down 1
down 9
forward 7
forward 9
down 4
down 2
forward 3
down 1
forward 2
down 2
down 5
forward 2
forward 3
forward 9
down 2
forward 3
forward 9
forward 6
forward 7
down 6
forward 5
up 7
forward 6
up 1
down 7
down 6
down 3
down 7
forward 2
forward 8
forward 3
down 3
forward 7
down 3
up 8
forward 1
down 5
down 9
down 6
forward 1
forward 1
down 1
down 1
forward 8
forward 7
forward 1
up 2
down 4
up 7
down 3
up 8
up 7
forward 3
up 9
down 5
forward 4
down 6
up 8
forward 6
forward 7
down 1
up 7
down 9
down 9
up 9
forward 7
down 6
down 4
down 6
down 7
down 7
up 7
down 4
up 7
forward 1
down 8
down 3
down 2
forward 9
up 7
down 1
down 2
forward 1
forward 5
down 7
up 4
down 7
down 4
down 5
up 8
down 6
down 2
down 4
up 5
down 8
down 3
down 9
forward 6
forward 5
down 1
down 3
down 2
down 3
forward 8
forward 4
forward 6
forward 9
up 1
forward 6
forward 8
down 2
down 1
forward 4
forward 2
forward 3
forward 2
forward 5
forward 2
forward 7
down 5
forward 2
forward 3
forward 9
down 3
down 4
down 7
down 9
down 5
forward 5
down 4
down 8
up 3
forward 1
forward 2
forward 6
up 2
down 9
down 8
up 8
up 3
forward 2
down 6
forward 9
down 3
down 3
forward 7
down 5
forward 2
down 4
down 1
forward 1
down 5
up 4
down 2
forward 8
down 9
down 5
up 4
forward 9
down 3
down 8
forward 8
forward 9
forward 3
up 5
forward 6
down 7
forward 5
down 4
down 9
down 1
up 4
down 8
forward 4
up 4
forward 4
forward 8
forward 3
forward 6
down 9
forward 5
up 4
forward 8
forward 2
down 2
down 1
up 3
forward 5
down 3
down 6
forward 7
down 8
down 1
forward 9
down 8
forward 7
forward 7
forward 7
up 9
up 5
forward 5
forward 2
down 4
up 8
up 7
forward 5
forward 3
forward 7
up 1
down 2
up 1
forward 3
up 8
down 3
forward 1
forward 5
forward 2
forward 5
down 8
up 1
forward 9
down 3
down 7
up 5
down 5
down 1
down 4
down 6
up 9
forward 5
forward 3
down 8
down 7
forward 3
down 9
forward 8
down 3
up 2
up 7
forward 3
down 9
down 5
down 9
up 6
down 9
down 1
down 1
up 4
up 5
up 6
forward 5
down 3
up 1
forward 9
forward 8
forward 8
forward 3
forward 5
forward 8
forward 1
down 8
up 7
down 3
forward 9
forward 1
up 8
down 7
up 4
down 2
down 5
forward 3
down 5
forward 8
forward 4
down 6
up 7
up 7
forward 8
down 6
down 8
down 9
forward 8
forward 1
forward 6
up 2
up 1
up 8
forward 8
forward 1
forward 4
forward 7
forward 2
down 7
down 8
up 5
up 4
up 4
up 7
forward 3
down 2
up 5
down 8
forward 6
up 9
forward 1
down 2
forward 7
down 4
down 6
down 3
down 7
down 9
down 3
forward 1
forward 5
down 2
down 6
up 7
up 2
up 3
up 5
forward 9
down 6
up 1
down 1
forward 3
forward 5
up 8
forward 5
forward 9
up 5
up 4
down 6
up 8
down 8
down 7
down 2
down 6
up 1
up 1
forward 8
down 4
up 3
down 2
down 1
forward 2
down 4
down 6
forward 2
up 8
forward 9
up 1
up 4
forward 2
down 9
down 4
forward 7
forward 6
forward 2
forward 2
forward 5
forward 6
down 3
forward 1
up 9
forward 2
down 3
down 1
down 3
up 9
forward 5
up 5
up 7
down 5
down 4
down 9
down 3
down 3
down 9
down 4
down 3
down 9
forward 9
down 1
down 6
down 7
down 7
down 5
down 8
down 5
forward 1
forward 3
up 1
forward 2
up 5
up 8
down 1
up 8
up 6
up 4
up 1
forward 3
forward 2
forward 4
up 3
down 6
down 1
down 6
up 8
up 7
forward 8
down 9
down 3
forward 2
forward 8
forward 8
down 1
forward 9
down 2
down 3
down 9
down 2
forward 8
down 2
down 6
forward 8
forward 1
up 1
forward 3
down 5
down 6
down 5
down 4
forward 6
forward 3
down 7
down 8
down 7
up 7
down 9
down 8
forward 6
down 1
forward 8
forward 9
up 4
down 1
forward 1
forward 9
down 4
down 2
forward 4
down 5
forward 4
down 7
forward 6
down 3
forward 3
forward 2
forward 7
down 2
forward 2
down 3
up 9
forward 4
forward 1
forward 8
forward 8
forward 6
forward 7
up 8
down 4
up 6
forward 3
up 8
forward 3
forward 1
forward 3
forward 9
up 2
up 5
forward 8
forward 6
forward 6
forward 4
down 6
forward 7
forward 3
forward 2
forward 2
forward 6
forward 5
down 7
up 1
forward 5
up 1
up 9
forward 5
up 3
forward 1
down 2
up 2
down 4
forward 7
forward 4
forward 1
down 1
up 4
down 4
up 2
up 5
down 5
forward 7
up 1
down 6
up 4
forward 3
forward 8
down 6
forward 4
down 2
down 3
down 5
down 4
down 9
up 4
forward 5
up 1
up 2
forward 7
forward 2
up 1
down 8
forward 4
forward 4
up 8
down 3
down 4
up 7
down 8
down 6
down 2
down 3
forward 9
forward 7
forward 6
down 2
down 7
forward 5
forward 2
up 5
down 5
forward 5
down 3
down 1
forward 4
forward 3
down 2
up 1
down 3
down 5
forward 6
forward 5
up 5
down 3
forward 8
down 9
up 4
up 4
down 8
forward 5
down 7
down 3
up 1
down 4
down 5
forward 4
forward 2
forward 4
up 9
down 5
forward 4
forward 6
forward 9
forward 7
forward 5
forward 6
up 4
forward 8
down 4
forward 4
forward 6
up 8
down 4
forward 3
down 8
forward 4
down 9
forward 5
down 4
up 8
forward 2
down 6
up 3
down 5
down 1
down 6
down 9
forward 9
down 1
down 5
up 8
forward 5
down 6
down 9
forward 1
down 6
down 8
down 1
down 2
down 1
forward 5
up 7
forward 5
down 2
down 4
down 1
forward 7
down 7
down 8
forward 4
forward 7
down 2
down 3
forward 2
up 9
down 4
down 5
forward 4
forward 4
forward 6
down 5
forward 8
down 9
forward 8
down 7
up 7
forward 9
up 1
forward 4
up 3
down 2
down 4
down 5
forward 2
forward 8
up 3
up 1
down 1
forward 7
forward 9
forward 6
up 1
down 2
forward 1
up 5
forward 3
down 7
down 6
forward 9
forward 6
forward 3
forward 8
down 2
down 7
forward 1
down 6
up 3
down 6
down 9
up 2
forward 8
forward 1
down 9
forward 8
forward 8
down 3
up 9
down 6
up 3
forward 3
forward 5
forward 7" pop inputText def 

{
	[
		2 copy swap readByte swap
	]
	3 1 roll
	pop pop
} defineWord def

[ 
	"forward" defineWord call
	"up" defineWord call
	"down" defineWord call
] words def
"0" pop readByte zeroDegitByte def

{ dup readByte zeroDegitByte - swap 1+ swap } readDigit def
{ dup 1 get swap 0 get "(x: %d, y: %d)" pop printf } printPos def
{
	# - count posIndex pos
	swap 2 copy # - count pos posIndex pos posIndex
	get # - count pos posIndex oldPosCoord
	4 -1 roll # - pos posIndex oldPosCoord count
	+ # - pos posIndex (oldPosCoord+count)
	3 1 roll # - (oldPosCoord+count) pos posIndex
	set # -
} addToPos def

[ 0 0 ]
inputText
{
	# pos inp
	dup readByte # pos inp inp[0]
	swap 1+ swap # pos (inp+1) inp[0]
	dup  # pos (inp+1) inp[0] inp[0]
	words 0 get 0 get = # pos (inp+1) inp[0] (inp[0] = f)
	# "Parsed: [" print
	{
		dup # pos (inp+1) inp[0] inp[0]
		words 1 get 0 get = # pos (inp+1) inp[0] (inp[0] = u)
		{
			# "down" print
			#down
			swap # pos inp[0] (inp+1) 
			words 2 get 1 get +	# pos inp[0] (inp+1+4) 
			readDigit call # pos inp[0] (inp+1+4) (digit at [inp+1+4])	
		}
		{
			# "up" print
			#up
			swap # pos (inp+1) inp[0]
			words 1 get 1 get +	# pos inp[0] (inp+1+2) 
			readDigit call # pos inp[0] (inp+1+2) (digit at [inp+1+2])	
			-1 * # pos inp[0] (inp+1+2) -(digit at [inp+1+2])	
		}
		ifelse
		1 # pos inp[0] newInpPointer count posIndex
	}
	{
		# "forward" print
		#forward
		swap # pos (inp+1) inp[0]
		words 0 get 1 get +	# pos inp[0] (inp+1+7)
		readDigit call # pos inp[0] (inp+1+7) (digit at [inp+1+7])	
		0 # pos inp[0] (inp+1+7) count posIndex
	}
	ifelse # pos inp[0] newInpPointer count posIndex
	# #region debug
	# 2 copy
	# "](" print
	# printNum
	# ", " print
	# printNum
	# ")" print
	# #endregion debug
	# pos inp[0] newInpPointer count posIndex

	# "\nBefore: " print
	# 4 index printPos call

	#region updatePos
	4 index # pos inp[0] newInpPointer count posIndex pos
	addToPos call # pos inp[0] newInpPointer
	swap pop # pos newInpPointer 
	#endregion updatePos

	# " | After: " print
	# 1 index printPos call
	# "\n" print

	dup readByte 0 != # pos newInpPointer (newInpPointer[0] !== \0)
	{
		pop
		dup 0 get swap 1 get * "Part one solution: %d\n" pop printf
	}
	{
		1+
		partOne call
	}
	ifelse
} partOne def
partOne call
[ 0 0 0 ]
inputText
{
	# pos inp
	dup readByte # pos inp inp[0]
	swap 1+ swap # pos (inp+1) inp[0]
	dup  # pos (inp+1) inp[0] inp[0]
	words 0 get 0 get = # pos (inp+1) inp[0] (inp[0] = f)
	# "Parsed: [" print
	{
		dup # pos (inp+1) inp[0] inp[0]
		words 1 get 0 get = # pos (inp+1) inp[0] (inp[0] = u)
		{
			# "down" print
			#down
			swap # pos inp[0] (inp+1) 
			words 2 get 1 get +	# pos inp[0] (inp+1+4) 
			readDigit call # pos inp[0] (inp+1+4) (digit at [inp+1+4])	
		}
		{
			# "up" print
			#up
			swap # pos (inp+1) inp[0]
			words 1 get 1 get +	# pos inp[0] (inp+1+2) 
			readDigit call # pos inp[0] (inp+1+2) (digit at [inp+1+2])	
			-1 * # pos inp[0] (inp+1+2) -(digit at [inp+1+2])	
		}
		ifelse
		1 # pos inp[0] newInpPointer count isAimCommand
	}
	{
		# "forward" print
		#forward
		swap # pos (inp+1) inp[0]
		words 0 get 1 get +	# pos inp[0] (inp+1+7)
		readDigit call # pos inp[0] (inp+1+7) (digit at [inp+1+7])	
		0 # pos inp[0] (inp+1+7) count isAimCommand
	}
	ifelse # pos inp[0] newInpPointer count isAimCommand
	# #region debug
	# 2 copy
	# "](" print
	# printNum
	# ", " print
	# printNum
	# ")" print
	# #endregion debug
	# pos inp[0] newInpPointer count isAimCommand

	# "\nBefore: " print
	# 4 index printPos call

	{
		# pos inp[0] newInpPointer count

		## Handle horizontal motion
		dup # pos inp[0] newInpPointer count count
		0 # pos inp[0] newInpPointer count count xIndex
		5 index # pos inp[0] newInpPointer count count xIndex pos
		addToPos call # pos inp[0] newInpPointer count

		## Handle vertical motion
		3 index # pos inp[0] newInpPointer count pos
		2 get # pos inp[0] newInpPointer count aimValue
		* # pos inp[0] newInpPointer (count*aimValue)

		1 # pos inp[0] newInpPointer (count*aimValue) yIndex
		4 index # pos inp[0] newInpPointer (count*aimValue) yIndex pos
		addToPos call # pos inp[0] newInpPointer

		swap pop # pos newInpPointer		
	}
	{
		# pos inp[0] newInpPointer count
		2 # pos inp[0] newInpPointer count aimIndex
		4 index # pos inp[0] newInpPointer count aimIndex pos
		addToPos call # pos inp[0] newInpPointer
		swap pop # pos newInpPointer
	}
	ifelse

	#region updatePos

	#endregion updatePos

	# " | After: " print
	# 1 index printPos call
	# "\n" print

	dup readByte 0 != # pos newInpPointer (newInpPointer[0] !== \0)
	{
		pop
		dup 0 get swap 1 get * "Part two solution: %d\n" pop printf
	}
	{
		1+
		partTwo call
	}
	ifelse
} partTwo def
partTwo call
